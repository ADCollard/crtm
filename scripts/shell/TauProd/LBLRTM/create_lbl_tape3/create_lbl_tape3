#!/bin/sh
#-----------------------------------------------------------------------
#
# NAME:
#       create_lbl_tape3
#
# PURPOSE:
#       Shell script to create the TAPE3 spectroscopic database file
#       required to run LBLRTM
#
# CALLING SEQUENCE:
#       create_lbl_tape3 [-h] [-i input_file] [-s hitran_file]
#
# INPUTS:
#       hitran_file:  Name of the HITRAN database to use.
#                     Default is TAPE1
#       input_file:   Name of the LNFL TAPE5 input file.
#                     Default is TAPE5
#
# OUTPUTS:
#       Two files are created:
#         tape3 file - this is the spectroscopic database file used
#                      by LBLRTM.
#         tape6 file - this is the LNFL log file.
#
# FILES ACCESSED:
#       HITRAN data base and LNFL input file (names supplied by user)
#
# SIDE EFFECTS:
#       Generic files named TAPE1 and TAPE5 are deleted if the user 
#       supplies different input_file and hitran_file filenames.
#
# RESTRICTIONS:
#       Some versions of LNFL will produce LBLRTM version specific 
#       files. It is left to the user to become familiar enough with
#       the various incarnations of LBLRTM and LNFL - and the HITRAN
#       database itself - to know which goes with which.
#
# EXAMPLE:
#       create_lbl_tape3 -s hitran96.db -i tape5.7mol_norej_0-20000cm-1
#
#       This creates the TAPE3 and log files:
#         tape3.tape5.7mol_norej_0-20000cm-1.hitran96.db
#         tape6.tape5.7mol_norej_0-20000cm-1.hitran96.db
#
# MODIFICATION HISTORY:
#       Written by:     Paul van Delst, CIMSS/SSEC, 12-Jan-2000
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
#                -- Usage description function --
#-----------------------------------------------------------------------

usage()
{
  echo "Usage: create_lbl_tape3 [-h] [-i input_file] [-s hitran_file]"
  echo
  echo "       -i   Use this option to specify an input file for"
  echo "            TAPE3 generation. If not specified, the default"
  echo "            value is TAPE5."
  echo
  echo "       -s   Use this option to specify the HITRAN spectroscopic"
  echo "            database file to use. If not specified, the default"
  echo "            value is TAPE1."
  echo
  echo "       -h   Print this message and exit"
  echo
}


#-----------------------------------------------------------------------
#                  -- Function for clean-up --
#-----------------------------------------------------------------------
cleanup()
{
  # Remove all 'TAPE' files 
  # (Except for TAPE5 and TAPE1)
  # ----------------------------
  for ITEM in `ls TAPE* 2>/dev/null`; do
    if [ "${ITEM}" != "TAPE1" -o "${ITEM}}" != "TAPE5" ]; then
      rm -f ${ITEM}
    fi
  done
}


#-----------------------------------------------------------------------
#                -- Function for file name linking --
#-----------------------------------------------------------------------
linkfile()
{
  # Assign input argument to variable
  # ---------------------------------
  FILE_NAME=$1
  LINK_NAME=$2

  # Check to see if requested file file exists
  # ------------------------------------------
  if [ ! -f ${FILE_NAME} ]; then
    echo
    echo "     Specified file, ${FILE_NAME}, not found."
    echo
    exit 1
  fi

  # Create link to requested filename
  # ---------------------------------
  # -- Is requested file name same as link name?
  if [ ! ${FILE_NAME} = ${LINK_NAME} ]; then

    # -- No it's not
    # -- Remove existing link file
    rm -f ${LINK_NAME}

    # -- Create symbolic link to requested file
    ln -s ${FILE_NAME} ${LINK_NAME}

  fi
}


########################################################################
#                    -- Begin main procedure --                        #
########################################################################

#----------------------------------------------------------------------#
#                    -- Output RCS Id string --                        #
#----------------------------------------------------------------------#

  RCSID='$Id$'
  echo
  echo ' '${RCSID}
  echo



#----------------------------------------------------------------------#
#                 -- Define default input files --                     #
#----------------------------------------------------------------------#

  TAPE5_FILE="TAPE5"
  TAPE1_FILE="TAPE1"



#----------------------------------------------------------------------#
#               -- Parse the command line options --                   #
#----------------------------------------------------------------------#

  while getopts :hi:s: OPTVAL; do

    # If option argument looks like another option
    # exit the loop
    # --------------------------------------------
    case ${OPTARG} in
      -*) break;;
    esac

    # Parse the valid options here
    # ----------------------------
    case ${OPTVAL} in
      i)  TAPE5_FILE=${OPTARG};;
      s)  TAPE1_FILE=${OPTARG};;
      h)  usage
          exit 2;;
      \?) OPTVAL=${OPTARG}
          break;;
    esac
  done

  # Remove the options processed
  # ----------------------------
  shift `expr ${OPTIND} - 1`

  # Now output invalidities based on OPTVAL
  # Need to do this as getopts does not handle
  # the situations where an option is passed
  # as an argument to another option.
  # ------------------------------------------
  case ${OPTVAL} in

    # If OPTVAL contains nothing, then all options
    # have been successfully parsed
    # --------------------------------------------
    \?) :;;

    # Valid options, but missing arguments
    # ------------------------------------
    i|s) echo "'-${OPTVAL}' option requires an argument"
         usage
         exit 2;;

    # Invalid option
    # --------------
    ?) echo "Invalid option '-${OPTARG}'"
       usage
       exit 2;;
  esac


#----------------------------------------------------------------------#
#            -- Check that specified input files exist --              #
#----------------------------------------------------------------------#

  if [ ! -f ${TAPE5_FILE} ]; then
    echo "Input file ${TAPE5_FILE} not found."
    exit 2
  fi

  if [ ! -f ${TAPE1_FILE} ]; then
    echo "Input file ${TAPE1_FILE} not found."
    exit 2
  fi


#----------------------------------------------------------------------#
#                    -- Cleanup before starting --                     #
#----------------------------------------------------------------------#

  cleanup


#----------------------------------------------------------------------#
#                -- Link in TAPE1 and TAPE5 files --                   #
#----------------------------------------------------------------------#

  # TAPE1
  # -----
  if [ "${TAPE1_FILE}" != "TAPE1" ]; then
    linkfile ${TAPE1_FILE} TAPE1
    if [ $? -ne 0 ]; then
      echo
      echo "     Error occurred linking to TAPE1 file: ${TAPE1_FILE}"
      echo
      exit 1
    fi
  fi

  # TAPE5
  # -----
  if [ "${TAPE5_FILE}" != "TAPE5" ]; then
    linkfile ${TAPE5_FILE} TAPE5
    if [ $? -ne 0 ]; then
      echo
      echo "     Error occurred linking to TAPE5 file: ${TAPE5_FILE}"
      echo
      exit 1
    fi
  fi


#----------------------------------------------------------------------#
#        -- Start the LNFL program to create the TAPE3 file --         #
#----------------------------------------------------------------------#

  # Specify and remove output filenames
  # -----------------------------------
  MOLECULE_TAG=`echo ${TAPE5_FILE} | cut -d"." -f2`
  HITRAN_TAG=`echo ${TAPE1_FILE} | cut -d"." -f1`
  FILE_TAG="${MOLECULE_TAG}.${HITRAN_TAG}"

  TAPE3_FILE="tape3.${FILE_TAG}"
  rm -f ${TAPE3_FILE}
  TAPE6_FILE="tape6.${FILE_TAG}"
  rm -f ${TAPE6_FILE}

  # Start LNFL program
  # ------------------
  LNFL_EXE=lnfl_v2.1
  echo
  echo " LBLRTM line file is being created..."
  ${LNFL_EXE}
  if [ $? -ne 0 ]; then
    echo "     Error occured in LNFL execution!"
    echo
    exit 1
  fi

  # Rename the output files
  # -----------------------
  mv TAPE3 ${TAPE3_FILE}
  if [ $? -ne 0 ]; then
    echo "     Error occured renaming TAPE3 to ${TAPE3_FILE}."
    echo
    exit 1
  fi

  mv TAPE6 ${TAPE6_FILE}
  if [ $? -ne 0 ]; then
    echo "     Error occured renaming TAPE6 to ${TAPE6_FILE}."
    echo
    exit 1
  fi


#----------------------------------------------------------------------#
#                             -- Cleanup --                            #
#----------------------------------------------------------------------#

  cleanup

exit

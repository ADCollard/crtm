#!/bin/sh
#
#  NAME:
# 	Link_SRF
#
#  PURPOSE:
#       Shell script file to link in the requested Spectral Response
#       Function (SRF) datafile from the CRTM fixfile repository.
#
#  CALLING SEQUENCE:
#       Link_SRF [-h] [-x] Sensor_Id_1 [Sensor_Id_2 | Sensor_Id_3 | ... | Sensor_Id_N]
#
#  ENVIRONMENT VARIABLES:
#       The following environment variables must be defined to use this script.
#
#       CRTM_FIXFILE_ROOT:  The directory location of a working copy of the
#                           CRTM fixfile repository.
#                           
#

# -----------------------------
# Error message output function
# -----------------------------
error_message()
{
  SCRIPT_NAME="`basename $0`"
  MESSAGE=$1
  echo; echo "${SCRIPT_NAME}(ERROR): ${MESSAGE}"
}

# --------------
# Usage function
# --------------
usage()
{
  echo
  echo "Usage: Link_SRF [-h] [-x] Sensor_Id_1 [Sensor_Id_2 | Sensor_Id_3 | ... | Sensor_Id_N]"
  echo
  echo "  -h"
  echo "       Print this message."
  echo
  echo "  -x"
  echo "       Turn on execution tracing"
  echo
  echo "  Sensor_Id_1 [Sensor_Id_2 | Sensor_Id_3 | ... | Sensor_Id_N]"
  echo "       The sensor id(s) of the instrument(s) for which the SRF file(s)"
  echo "       is(are) to be linked."
  echo
}


########################################################################
#                           MAIN SCRIPT BEGINS                         #
########################################################################

# Set up
# ------
SUCCESS=0
FAILURE=1


# Parse the command line options
# ------------------------------
while getopts :hx OPTVAL; do
  # Exit if option argument looks like another option
  case ${OPTARG} in
    -*) break;;
  esac
  # Parse the valid options
  case ${OPTVAL} in
    h) usage; exit ${SUCCESS};;
    x) set -x;;
    :|\?) OPTVAL=${OPTARG}; break;;
  esac
done
# Remove the options processed
shift $(expr ${OPTIND} - 1)
# Output invalidities based on OPTVAL
case ${OPTVAL} in
  # If OPTVAL contains nothing, then all options
  # have been successfully parsed and all that
  # remains are the arguments
  \?) if [ $# -lt 1 ]; then
        usage; error_message " Missing 'Sensor_Id' argument(s)"
        exit ${FAILURE}
      fi;;
  # Invalid option
  ?) usage; error_message " Invalid option '-${OPTARG}'"; exit ${FAILURE};;
esac


# Assign command line arguments
# -----------------------------
SENSOR_ID_LIST=$*


# Check that the mandatory envar is defined
# -----------------------------------------
if [ -z "${CRTM_FIXFILE_ROOT}" ]; then
  error_message "CRTM_FIXFILE_ROOT envar is not defined."
  exit ${FAILURE}
fi


# Set the main SRF directory name
# -------------------------------
SRF_DIR="${CRTM_FIXFILE_ROOT}/TauProd/SRF_Data/netCDF/Interpolated"


# Loop over the sensor ids to link
# --------------------------------
RETURN_CODE=${SUCCESS}
for SENSOR_ID in ${SENSOR_ID_LIST}; do
  # Create the SRF filename
  SRF_FILE="${SENSOR_ID}.srf.nc"
  # Check that the file exists, but keep going if it doesn't
  if [ ! -f ${SRF_DIR}/${SRF_FILE} ]; then
    error_message " SRF datafile, ${SRF_FILE}, not found in ${SRF_DIR}. Skipping..."
    RETURN_CODE=${FAILURE}
    continue
  fi
  # Link it in
  if [ ! -f ${SRF_FILE} ]; then
    ln -s ${SRF_DIR}/${SRF_FILE} .
    if [ $? -ne 0 ]; then
      error_message "Error occured linking ${SRF_FILE} to ${PWD}"
      exit ${FAILURE}
    fi
  else
    error_message "${SRF_FILE} file already exists in this directory!"
    exit ${FAILURE}
  fi
done


# Done. Turn off execution tracing
# --------------------------------
set +x
exit ${RETURN_CODE}


#!/bin/sh

#
#  NAME:
# 	Link_SensorInfo
#
#  PURPOSE:
#       Shell script file to link in the Master SensorInfo file, SensorInfo, from
#       the SensorInfo subdirectory in a working copy of the CRTM fixfile
#       repository.
#
#  CALLING SEQUENCE:
#       Link_SensorInfo [-h] [-x]
#
#  ENVIRONMENT VARIABLES:
#       The following environment variables must be defined to use this script.
#
#       CRTM_FIXFILE_ROOT:  The directory location of a working copy of the
#                           CRTM fixed file repository -- where all the 
#                           files that do not change (i.e. are "fixed") are
#                           kept.
#                           
#

# -----------------------------
# Error message output function
# -----------------------------
error_message()
{
  SCRIPT_NAME="`basename $0`"
  MESSAGE=$1
  echo; echo "${SCRIPT_NAME}(ERROR): ${MESSAGE}"
}


# --------------
# Usage function
# --------------
usage()
{
  echo
  echo "Usage: Link_SensorInfo [-h] [-x]"
  echo
  echo "  -h"
  echo "       Print this message."
  echo
  echo "  -x"
  echo "       Turn on execution tracing"
  echo
}

########################################################################
#                           MAIN SCRIPT BEGINS                         #
########################################################################

# Set up
# ------
SUCCESS=0
FAILURE=1


# Parse the command line options
# ------------------------------
while getopts :hlrx OPTVAL; do
  # Exit if option argument looks like another option
  case ${OPTARG} in
    -*) break;;
  esac
  # Parse the valid options
  case ${OPTVAL} in
    h) usage; exit ${SUCCESS};;
    x) set -x;;
    \?) OPTVAL=${OPTARG}; break;;
  esac
done
# Remove the options processed
shift $(expr ${OPTIND} - 1)
# Output invalidities based on OPTVAL
case ${OPTVAL} in
  # If OPTVAL contains nothing, then all options
  # have been successfully parsed
  \?) break;;
  # Invalid option
  ?) usage; error_message " Invalid option '-${OPTARG}'"; exit ${FAILURE};;
esac


# Check that the mandatory envar is defined
# -----------------------------------------
if [ -z "${CRTM_FIXFILE_ROOT}" ]; then
  error_message " CRTM_FIXFILE_ROOT envar is not defined."
  exit 1
fi


# Check that the file to be linked exists
# ---------------------------------------
SENSORINFO_DIR="${CRTM_FIXFILE_ROOT}/SensorInfo"
SENSORINFO_FILE=SensorInfo
if [ ! -f ${SENSORINFO_DIR}/${SENSORINFO_FILE} ]; then
  error_message " Master SensorInfo file, ${SENSORINFO_FILE}, not found in ${SENSORINFO_DIR}"
  exit 1
fi


# Link in the file
# ----------------
if [ ! -f ${SENSORINFO_FILE} ]; then
  ln -s ${SENSORINFO_DIR}/${SENSORINFO_FILE} .
  if [ $? -ne 0 ]; then
    error_message " Error occuring linking ${SENSORINFO_FILE} to ${PWD}"
    exit 1
  fi
else
  error_message " ${SENSORINFO_FILE} file already exists in this directory!"
  exit 1
fi


# Done. Turn off execution tracing
# --------------------------------
set +x
exit ${SUCCESS}


#!/bin/sh
#------------------------------------------------------------------------------
#
#  NAME:
# 	lblrun
#
#  PURPOSE:
#       Script file to run LBLRTM in a dynamically defined work directory
#       that is tagged with the begin date and time of the LBLRTM run.
#       The LBLRTM home directory is defined in the environment variable
#       LBL_HOME. If this environment variable is not set, execution stops
#       and the user is notified.
#
#       An additional environment variable, LBL_RUN_ROOT, can be defined to
#       allow the user to select the root directory in which LBLRTM is
#       actually run. If not specified, the root directory defaults to the
#       user's home directory. This option was added to take advantage of 
#       superior I/O capabilities of different file systems that *may* 
#       exist on a system.
#
#  CATEGORY:
#       LBLRTM
#
#  LANGUAGE:
#       Bourne shell script
#
#  CALLING SEQUENCE:
#       lblrun [-dhn] [-r results_directory] [-s tape3_file] tape5_file [esfc_file rsfc_file]
#
#  SIDE EFFECTS:
#       - If the user elects to output the results to a named subdirectory
#         using the -r option, if that subdirectory already exists, it is
#         removed.
#       - If the copy of products to the results directory fails
#         (e.g. insufficient disk space), then a symbolic link to the
#         product file in the run directory is attempted. If successful
#         the run directory is not removed.         
#
#  RESTRICTIONS:
#       lblrun will not execute LBLRTM if the LBL_HOME environment variable 
#       is not set. It is strongly recommended that this environment variable,
#       be set in your .profile or .cshrc file (or equivalent).
#
#  EXAMPLE:
#       Given a directory containing a TAPE5 file, say "TAPE5.rdk", LBLRTM
#       can be run in double precision mode using the -d option:
#
#         origin:/paulv/lblrtm : lblrun -d TAPE5.rdk
#
#       The results are placed in a subdirectory tagged with a user, date,
#       and time; e.g. "lblrtm_paulv_20020513_145615CDT_1".
#
#       To output the results to a subdirectory of your choice, pass the
#       subdirectory name using the -r option:
#
#          origin:/paulv/lblrtm : lblrun -r output TAPE5.rdk
#
#       This will create the subdirectory "output" and place the LBLRTM
#       results there.
#
#       To use a spectroscopic database other than the default, use the -s
#       option:
#
#          origin:/paulv/lblrtm : lblrun -s tape3.1996_JPL TAPE5.rdk
#
#  CREATION HISTORY:
# 	Written by:	Paul van Delst, CIMSS/SSEC, 20-Jun-1996
# 			paul.vandelst@ssec.wisc.edu
#
#  Copyright (C) 1996, 2003 Paul van Delst
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
#                        -- USAGE DESCRIPTION FUNCTION --
#-------------------------------------------------------------------------------

usage()
{
  echo
  echo " Usage: lblrun [-dhn] [-r results_directory] [-s tape3_file] tape5_file [esfc_file rsfc_file]"
  echo
  echo "   -d           Use this option to use the double-precision LBLRTM executable."
  echo "                The default action is to use the single-precision version."
  echo
  echo "   -h           Print this message and exit"
  echo
  echo "   -n           Use this option to prevent the optical depth data files"
  echo "                being copied to the results directory. The default is to"
  echo "                copy all the optical depth (OD*) files."
  echo
  echo "   -r           Use this option to specify the name of the subdirectory"
  echo "                in which to copy the results of the LBLRTM run."
  echo "                Default action is to copy results into a subdirectory"
  echo "                tagged by the user name and LBLRTM run begin date and time."
  echo
  echo "   -s           Use this option to specify the name of the spectroscopic"
  echo "                database file (TAPE3) to use. Valid names are:"
  echo "                  tape3.2000_AER - the HITRAN2000 database with the AER updates."
  echo "                  tape3.1996_JPL - the HITRAN1996 database with the JPL/Toth extensions."
  echo "                If not specified, the default is tape3.2000_AER."
  echo "                Both files contain the spectroscopic data from the first"
  echo "                seven HITRAN molecules from 0-20000cm-1."
  echo
  echo "   tape5_file   TAPE5 LBLRTM input file. This is a required argument."
  echo
  echo "   esfc_file    File containing surface emissivity spectrum to be used in"
  echo "                the radiative transfer. If specified, the rsfc_file must also"
  echo "                be specified."
  echo
  echo "   rsfc_file    File containing surface reflectivity spectrum to be used in"
  echo "                the radiative transfer. Must be specified after the esfc_file."
  echo
}



#-------------------------------------------------------------------------------
#                 -- INPUT FILE CHECK AND COPY FUNCTION --
#
# Function to check the existence of and copy the input files to the
# working directory.
#-------------------------------------------------------------------------------

input_file_copy()
{

  # ----------------------
  # Assign input arguments
  # ----------------------

  FROM_FILE=$1
  TO_FILE=$2
  TO_DIR=$3


  # ------------------------------------
  # Check if requested input file exists
  # ------------------------------------

  if [ ! -f ${FROM_FILE} ]; then
    echo
    echo "File ${FROM_FILE} not found!"
    exit 2
  fi


  # --------------------------------------
  # Copy the file to the required filename
  # --------------------------------------

  echo "     Using ${TO_FILE} file ${FROM_FILE}"

  rm -f ${TO_DIR}/${TO_FILE} 2>/dev/null
  cp ${FROM_FILE} ${TO_DIR}/${TO_FILE}


  # ----------------------------------------
  # Check if an error occurred with the copy
  # ----------------------------------------

  if [ $? -ne 0 ]; then
    echo "Error occurred copying ${FROM_FILE}"
    date
    echo "${TO_DIR} directory listing follows:"
    ls -laF ${TO_DIR}
    exit 2
  fi

}



#-------------------------------------------------------------------------------
#                          -- FILE MOVE FUNCTION --
#
# Function to move back LBLRTM products and check for copy errors. This should
# eliminate deletion of products if the file copy fails for some reason, e.g.
# not enough disk space at destination.
#-------------------------------------------------------------------------------

move_file()
{

  # ----------------------
  # Assign input arguments
  # ----------------------

  FROM_FILE=$1
  TO_FILE=$2


  # ----------------------
  # Copy file if it exists
  # ----------------------

  if [ -f ${FROM_FILE} ]; then

    cp ${FROM_FILE} ${TO_FILE}


    # ---------------------------------------------
    # Make sure copy was successful before deleting
    # ---------------------------------------------

    if [ $? -eq 0 ]; then

      # -- Delete the original file
      rm -f ${FROM_FILE}

    else

      # -- File copy failed so try to link to it instead
      echo 'Error copying '${FROM_FILE}' to '${TO_FILE}'. Attempting link instead'
      ln -s ${FROM_FILE} ${TO_FILE}

      # -- Check for link error too
      if [ $? -ne 0 ]; then
        echo 'Error linking file also! Sorry. :('
        date
        exit 2
      fi

    fi

  fi
}


################################################################################
################################################################################
#                           -- BEGIN MAIN PROCEDURE --
################################################################################
################################################################################


#-------------------------------------------------------------------------------
#                           -- OUTPUT HEADER STRING --
#-------------------------------------------------------------------------------

  RCS_ID='$Id: lblrun,v 2.20 2005/09/13 14:15:19 paulv Exp $'
  echo
  echo " "${RCS_ID}
  echo



#-------------------------------------------------------------------------------
#                              -- DEFINE DEFAULTS --
#-------------------------------------------------------------------------------

  # -- Single precision is the default
  DOUBLE=0

  # -- Optical depth file copy is ON by default
  OD_COPY=1

  # -- No surface emissivity/reflectivity files required
  USE_SURFACE_FILES=0



#-------------------------------------------------------------------------------
#                       -- PARSE THE COMMAND LINE OPTIONS --
#-------------------------------------------------------------------------------

  while getopts :dhnr:s: OPTVAL; do


    # --------------------------------------------
    # If option argument looks like another option
    # exit the loop
    # --------------------------------------------

    case ${OPTARG} in
      -*) break;;
    esac


    # ----------------------------
    # Parse the valid options here
    # ----------------------------

    case ${OPTVAL} in
      r)  RESULTS_DIR=${OPTARG};;
      s)  TAPE3_FILE=${OPTARG};;
      d)  DOUBLE=1;;
      n)  OD_COPY=0;;
      h)  usage
          exit 0;;
      :|\?) OPTVAL=${OPTARG}
            break;;
    esac

  done


  # ----------------------------
  # Remove the options processed
  # ----------------------------

  shift `expr ${OPTIND} - 1`


  # ------------------------------------------
  # Now output invalidities based on OPTVAL
  # Need to do this as getopts does not handle
  # the situations where an option is passed
  # as an argument to another option.
  # ------------------------------------------

  case ${OPTVAL} in


    # --------------------------------------------
    # If OPTVAL contains nothing, then all options
    # have been successfully parsed and all that
    # remains in the argument list is the TAPE5
    # filename
    # --------------------------------------------

    \?) if [ $# -lt 1 ]; then
          echo " Missing 'tape5_file' argument"
          usage
          exit 2
        fi;;


    # ------------------------------------
    # Valid options, but missing arguments
    # ------------------------------------

    r|s) echo " '-${OPTVAL}' option requires an argument"
         usage
         exit 2;;


    # --------------
    # Invalid option
    # --------------

    ?) echo " Invalid option '-${OPTARG}'"
       usage
       exit 2;;

  esac


  # ---------------------
  # Assign file arguments
  # ---------------------

  TAPE5_FILE=$1

  # -- Assign surface emissivity and
  # -- reflectivity files if passed
  if [ $# -gt 1 ]; then
    if [ $# -ne 3 ]; then
      usage
      exit 2
    fi
    EMISSIVITY_FILE=$2
    REFLECTIVITY_FILE=$3
    USE_SURFACE_FILES=1
  fi 



#-------------------------------------------------------------------------------
#                        -- CHECK THAT LBL_HOME IS SET --
#-------------------------------------------------------------------------------

  # -----------------------------------------------------
  # Determine if the LBL_HOME environment variable is set
  # -----------------------------------------------------

  DEF_LBL_HOME=`env | grep LBL_HOME`


  # -------------------------------------------------------
  # If LBL_HOME is not set, then let the user know and exit
  # -------------------------------------------------------

  if [ -z "${DEF_LBL_HOME}" ]; then
    echo
    echo ' Required LBL_HOME environment variable not set.'
    echo ' Set this environment variable to the LBLRTM home directory'
    exit 1


  # -------------------------------------------------------------------
  # Otherwise check to see if the defined directory actually exists....
  # -------------------------------------------------------------------

  else

    if [ ! -d ${LBL_HOME} ]; then
      echo
      echo ' Directory defined by LBL_HOME, '${LBL_HOME}' does not exist!'
      exit 2
    fi

  fi



#-------------------------------------------------------------------------------
#                -- CHECK IF LBL_RUN_ROOT VARIABLE IS SET --
#-------------------------------------------------------------------------------

  # ---------------------------------------------------------
  # Determine if the LBL_RUN_ROOT environment variable is set
  # ---------------------------------------------------------

  DEF_LBL_RUN_ROOT=`env | grep LBL_RUN_ROOT`


  # ---------------------------------------------------------------
  # If LBL_RUN_ROOT is not set, then make the user's home directory
  # the work directory....
  # ---------------------------------------------------------------

  if [ -z "${DEF_LBL_RUN_ROOT}" ]; then
    LBL_RUN_ROOT=${HOME}


  # -------------------------------------------------------------------
  # Otherwise check to see if the defined directory actually exists....
  # -------------------------------------------------------------------

  else

    if [ ! -d ${LBL_RUN_ROOT} ]; then
      echo
      echo ' Directory defined by LBL_RUN_ROOT, '${LBL_RUN_ROOT}' does not exist!'
      exit 2
    fi

  fi



#-------------------------------------------------------------------------------
#        -- CREATE THE DATA AND TIME FLAGGED LBLRTM WORK DIRECTORY --
#-------------------------------------------------------------------------------

  # ---------------------------
  # Get the start date and time
  # ---------------------------

  LBLRUN_DATE=`date '+%Y%m%d'`
  LBLRUN_TIME=`date '+%H%M%S%Z'`


  # ----------------------------------------------------
  # Create a root definition for the LBLRUN_TAG variable
  # ----------------------------------------------------

  ROOT_LBLRUN_TAG='_'`whoami`'_'${LBLRUN_DATE}'_'${LBLRUN_TIME}


  # ----------------------------------------------------------------
  # Make sure the directory doesn't already exist by suffixing
  # the name with an _ and an integer identifier.
  # Need to check this just in case the time and dates were assigned
  # at the same time. This occurance is very likely on larger multi-
  # CPU systems. Even so, a maximum limit of 100 concurrent "jobs"
  # is used.
  # ----------------------------------------------------------------

  # -- Maximum number of work directories that
  # -- can be created WITH THE SAME ROOT_LBLRUN_TAG
  MAX_N_LBLRTM_DIRECTORIES=100

  # -- Loop over suffixes to ROOT_LBLRUN_TAG
  LBLRUN_SUFFIX=0
  while :
  do

    # -- Suffix the directory with a number
    LBLRUN_SUFFIX=`expr ${LBLRUN_SUFFIX} + 1`
    LBLRUN_TAG=${ROOT_LBLRUN_TAG}'_'${LBLRUN_SUFFIX}
    LBL_WORK=${LBL_RUN_ROOT}'/.lblrtm'${LBLRUN_TAG}

    # -- If the same date/time directory suffix ID has reached a 
    # -- level of MAX_N_LBLRTM_DIRECTORIES, maybe something is wrong?
    if [ ${LBLRUN_SUFFIX} -eq ${MAX_N_LBLRTM_DIRECTORIES} ]; then
      echo "LBLRTM work directory (based on .lblrtm${ROOT_LBLRUN_TAG}) ID value = ${MAX_N_LBLRTM_DIRECTORIES}! Exiting."
      date
      echo "${LBL_RUN_ROOT} directory listing follows:"
      ls -laF ${LBL_RUN_ROOT}
      exit 2
    fi

    # -- Create the work directory if it doesn't exist
    if [ ! -d ${LBL_WORK} ]; then

      mkdir ${LBL_WORK}

      # -- Check that directory creation was successful. If not, increment
      # -- the suffix counter by looping again.
      if [ $? -ne 0 ]; then
        echo "Error occurred creating work directory ${LBL_WORK}. Incrementing."
        date
        echo "${LBL_RUN_ROOT} directory listing follows:"
        ls -laF ${LBL_RUN_ROOT}
        continue
      fi

      # -- Exit the loop
      break
    fi
      
  done



#-------------------------------------------------------------------------------
#                         -- LINK TO HITRAN FILES --
#-------------------------------------------------------------------------------

  # -------------------------------------------------------------------
  # Link to cross-section molecule description file FSCDXS if required
  # -------------------------------------------------------------------

  HITRAN_DIR=${LBL_HOME}/hitran

  if [ ! -f ${LBL_WORK}/FSCDXS ]; then

    ln -s ${HITRAN_DIR}/FSCDXS ${LBL_WORK}/FSCDXS

    if [ $? -ne 0 ]; then
      echo "Error occurred linking to ${HITRAN_DIR}/FSCDXS"
      date
      echo "${LBL_WORK} directory listing follows:"
      ls -laF ${LBL_WORK}
      exit 2
    fi

  fi


  # ---------------------------------------------------------------
  # Link /xs (cross-section data) directory to LBL_WORK if required
  # ---------------------------------------------------------------

  if [ ! -d ${LBL_WORK}/xs ]; then

    ln -s ${HITRAN_DIR}/xs ${LBL_WORK}/xs

    if [ $? -ne 0 ]; then
      echo "Error occurred linking ${HITRAN_DIR}/xs data"
      date
      echo "${LBL_WORK} directory listing follows:"
      ls -laF ${LBL_WORK}
      exit 2
    fi

  fi


  # ---------------------------------------------------
  # Link TAPE3 spectroscopic database to work directory
  # ---------------------------------------------------

  # -- Defaults

  T3_FILE='tape3.2000_AER'
  T3_DIR=${HITRAN_DIR}


  # -- Assign defaults if necessary

  if [ -z "${TAPE3_FILE}" ]; then
    TAPE3_FILE=${T3_DIR}/${T3_FILE}
  else
    T3_FILE=${TAPE3_FILE}
    TAPE3_FILE=${T3_DIR}/${T3_FILE}
  fi


  # -- Check that TAPE3 file exists

  if [ ! -f ${TAPE3_FILE} ]; then 
    echo "Invalid TAPE3 file ${TAPE3_FILE}."
    exit 2
  fi


  # -- Output info

  echo
  echo "     Using TAPE3 file ${T3_FILE}"


  # -- Remove old TAPE3 and link in new one

  rm -f ${LBL_WORK}/TAPE3 2>/dev/null
  ln -s ${TAPE3_FILE} ${LBL_WORK}/TAPE3

  if [ $? -ne 0 ]; then
    echo "Error occurred linking ${TAPE3_FILE}"
    date
    echo "${LBL_WORK} directory listing follows:"
    ls -laF ${LBL_WORK}
    exit 2
  fi



#-------------------------------------------------------------------------------
#             -- COPY THE INPUT FILES TO THE WORK DIRECTORY --
#-------------------------------------------------------------------------------

  CURRENT_DIR=$PWD

  # --------------
  # The TAPE5 file
  # --------------

  input_file_copy ${TAPE5_FILE} 'TAPE5' ${LBL_WORK}


  # ---------------------------------------------
  # The surface emissivity and reflectivity files
  # ---------------------------------------------

  if [ ${USE_SURFACE_FILES} -eq 1 ]; then

    input_file_copy ${EMISSIVITY_FILE} 'EMISSIVITY' ${LBL_WORK}
    input_file_copy ${REFLECTIVITY_FILE} 'REFLECTIVITY' ${LBL_WORK}

  fi



#-------------------------------------------------------------------------------
#                      -- RUN LBLRTM IN WORK DIRECTORY --
#-------------------------------------------------------------------------------

  # -- Define the LBLRTM version
  LBLRTM_VERSION="lblrtm_v9.4"

  # -- Single precision is the default....
  LBLRTM="${LBLRTM_VERSION}_sgl"

  # -- ....unless the DOUBLE flag was set
  if [ ${DOUBLE} -eq 1 ]; then
    LBLRTM="${LBLRTM_VERSION}_dbl"
  fi

  cd ${LBL_WORK}
  echo
  echo " ${LBLRTM} running."
  echo " Begin date: ${LBLRUN_DATE}"
  echo " Begin time: ${LBLRUN_TIME}"
  echo
  nice -1 ${LBL_HOME}/bin/${LBLRTM}
  


#-------------------------------------------------------------------------------
#                   -- SET AND CREATE THE RESULTS DIRECTORY --
#-------------------------------------------------------------------------------

  # ------------------------------
  # Set the results directory name
  # ------------------------------

  if [ ! -z "${RESULTS_DIR}" ]; then
    RESULTS_DIR="${CURRENT_DIR}/${RESULTS_DIR}"
  else
    RESULTS_DIR="${CURRENT_DIR}/lblrtm${LBLRUN_TAG}"
  fi


  # ------------------------------
  # If it doesn't exist, create it
  # ------------------------------

  if [ ! -d ${RESULTS_DIR} ]; then
    mkdir ${RESULTS_DIR}
    if [ $? -ne 0 ]; then
      echo "Error creating ${RESULTS_DIR} directory"
      date
      exit 2
    fi
  fi



#-------------------------------------------------------------------------------
#                          -- COPY BACK PRODUCTS --
#-------------------------------------------------------------------------------

  # --------------------------
  # Determine disk usage in KB
  # --------------------------

  DISK_USAGE=`du -sk ${RESULT_DIR} | cut -f1 -d" "`


  # -------------------
  # Output info message
  # -------------------

  echo 
  echo " Saving LBLRTM products (${DISK_USAGE} kB total) in ${RESULTS_DIR}...."


  # ---------------------------------------------------------------
  # Copy products and then delete them individually using the 
  # move_file function. This will work across filesystems whereas
  # mv will not.
  # ---------------------------------------------------------------

  # -- Copy individual TAPE* files (but not #3 and 5)
  move_file TAPE6 ${RESULTS_DIR}/TAPE6
  move_file TAPE7 ${RESULTS_DIR}/TAPE7
  for TAPEXX_FILE in `ls TAPE?? 2>/dev/null`; do
    move_file ${TAPEXX_FILE} ${RESULTS_DIR}/${TAPEXX_FILE}
  done

  # -- Copy cross-section output files
  for XS_FILE in `ls TMP* 2>/dev/null`; do
    move_file ${XS_FILE} ${RESULTS_DIR}/${XS_FILE}
  done

  # -- Copy layer optical depth files only if required
  if [ ${OD_COPY} -eq 1 ]; then
    for OD_FILE in `ls OD* 2>/dev/null`; do
      move_file ${OD_FILE} ${RESULTS_DIR}/${OD_FILE}
    done
  else
    rm -f OD* 2>/dev/null
  fi



#-------------------------------------------------------------------------------
#              -- DELETE EVERYTHING ELSE IN THE WORK DIRECTORY --
#-------------------------------------------------------------------------------

  # ------------------
  # Remove input files
  # ------------------

  rm -f FSCDXS 2>/dev/null
  rm -f TAPE3 2>/dev/null
  rm -f TAPE5 2>/dev/null
  rm -f xs 2>/dev/null

  if [ ${USE_SURFACE_FILES} -eq 1 ]; then
    rm -f EMISSIVITY 2>/dev/null
    rm -f REFLECTIVITY 2>/dev/null
  fi
  

  # --------------------------------
  # Remove (un-needed?) output files
  # --------------------------------

  rm -f TAPE9 2>/dev/null
  rm -f TAPE11 2>/dev/null


  # ---------------------------------------------------
  # Return to the directory in which lblrun was invoked
  # and delete the work directory (if it's empty)
  # ---------------------------------------------------

  cd ${CURRENT_DIR}
  rmdir ${LBL_WORK}


  # ------------------
  # Output an end time
  # ------------------

  END_TIME=`date '+%H%M%S%Z'`
  echo
  echo " End time:   ${END_TIME}"
  echo


exit


#-------------------------------------------------------------------------------
#                          -- MODIFICATION HISTORY --
#-------------------------------------------------------------------------------
#
# $Id: lblrun,v 2.20 2005/09/13 14:15:19 paulv Exp $
#
# $Date: 2005/09/13 14:15:19 $
#
# $Revision: 2.20 $
#
# $Name:  $
#
# $State: Exp $
#
# $Log: lblrun,v $
# Revision 2.20  2005/09/13 14:15:19  paulv
# - Updated executable name to current Release 9.4.
#
# Revision 2.19  2004/07/19 17:59:42  paulv
# - Updated for LBLRTM v8.6beta executable.
#
# Revision 2.18  2004/04/16 19:06:37  paulv
# Updated for LBLRTM v8.4 distribution.
#
# Revision 2.17  2004/03/17 19:55:24  paulv
# - Removed the code that deletes then recreates the results directory if it
#   already exists. Replaced it with code that creates the directory if it
#   doesn't already exist, otherwise does nothing.
#
# Revision 2.16  2003/12/02 18:03:15  paulv
# Updated for LBLRTM v8.3 distribution.
#
# Revision 2.15  2003/06/18 20:46:44  paulv
# - Updated for v7.04 distribution.
#
# Revision 2.14  2003/01/24 21:15:41  paulv
# - Now using a variable to specify the maximum number of scratch directories
#   to loop over before issuing an error.
#
# Revision 2.13  2002/10/17 18:44:11  paulv
# - Completed documentation in usage function.
#
# Revision 2.12  2002/10/17 18:42:50  paulv
# - Altered LBLRTM version to 6.12
# - Added documentation for the "-n" option.
#
# Revision 2.11  2002/09/01 02:35:57  paulv
# - Modified the method by which the run directory is created. If an error
#   occurs creating the directory the loop is continued.
#
# Revision 2.10  2002/08/09 15:19:04  paulv
# - Altered the way teh work directory was created.
#
# Revision 2.9  2002/06/11 16:28:31  paulv
# - Added "-n" argument to turn off the copy of optical depth output files
#   if required.
#
# Revision 2.8  2002/05/14 14:43:36  paulv
# - Added "-d" option to specify that teh double precision version of LBLRTM
#   should be used. Single-precision is the default.
# - Added input file check function for use with copying the TAPE5 and surface
#   emissivity and reflectivity files.
# - Updated header documentation.
#
# Revision 2.7  2002/05/13 12:50:40  paulv
# - Added capability to specify emissivity and reflectivity files for copying
#   to the work directory. Header documentation not yet updated as still
#   testing.
#
# Revision 2.6  2002/03/13 16:14:06  paulv
# - Added END TIME output.
#
# Revision 2.5  2000/07/14 20:11:13  paulv
# - Altered the way the work directory name is determined. With multiple
#   LBLRTM runs, many clashes were occuring. Now, the work directory name is
#   updated until it is successfully created or if the unique suffix number
#   is > 10 (which may indicate a problem)
#
# Revision 2.4  2000/07/14 17:14:47  paulv
# - Added error checking for file linking and copying. Script now
#   terminates with an error code if problems encountered in these
#   situations.
#
# Revision 2.3  2000/06/29 16:43:57  paulv
# - Corrected bug/logic error in argument parsing related to the TAPE5
#   file input.
# - Corrected bug in assigning file argument, $1, to its variable, TAPE5_FILE.
# - Included the 'molecular_database' subdirectory in the user-defined TAPE3
#   file path.
# - Error output from 'ls TMP*' and 'ls OD*' redirected to /dev/null.
#
# Revision 2.2  2000/06/29 14:23:55  paulv
# - Fixed a bug in the usage function
# - Updated header documentation
#
# Revision 2.1  2000/06/29 13:51:36  paulv
# - Altered lblrun interface. getopts now being used to parse through
#   input arguments.
# - Now using move_file function for TMP* and OD* files within a for
#   loop.
#
# Revision 1.15  2000/01/19 19:41:15  paulv
# Error output from TMP* and OD* product file copy redirected to /dev/null
#
# Revision 1.14  2000/01/19 19:37:48  paulv
# Fixed bug in /xs directory deletion.
#
# Revision 1.13  2000/01/19 17:23:49  paulv
# Cross-section data directory name changed from /x to /xs
#
# Revision 1.12  1999/04/15 13:53:45  paulv
# - Changed movement of OD* and TMP* files using cp rather than the function
#   move_files.
#
# Revision 1.11  1999/03/17 20:11:28  paulv
# - Added function move_files to copy over product files to results
#   directory. This function checks if the files exists before it copies.
#   If the copy fails, the original file is NOT deleted and a symbolic link
#   is attempted.
# - All product files are now copied over, even the large ones. Lack of
#   sufficient disk space is now the concern of the user.
#
# Revision 1.10  1999/02/08 14:52:36  paulv
# Corrected bug in copying TMP* and OD* files to the user defined output
#   directory.
#
# Revision 1.9  1999/01/22 18:03:59  paulv
# Updated header documentation.
#
# Revision 1.8  1999/01/22 17:41:51  paulv
# - Changed default shell from Korn to Bourne shell for running under Linux.
# - Altered the syntax of reading in the date and time into the LBLRUN_DATE
#   and LBLRUN_TIME variables. Using the "read" command didn't work under
#   Linux. Don't know why.
# - Changed all Korn shell specific operations to Bourne shell syntax, e.g.
#   integer arithmetic, file type inquiry.
# - Removed use of timex command. Linux doesn't appear to have this
#   functionality.
# - TAPE10 product file is no longer copied over at end of LBLRTM run.
# - Header documentation updated.
#
# Revision 1.7  1999/01/14 23:10:27  paulv
# Renamed TAPE3 file that is copied to a more generic name, tape3.data
#   to allow for switching of the file in the T3_DIR.
# Development purposes only.
#
# Revision 1.6  1999/01/11 19:42:17  paulv
# Changed HITRAN directory from hitran96 to simply hitran.
#
# Revision 1.5  1999/01/11 17:28:34  paulv
# Changed TAPE3 directory from ${HITRAN_DIR}/tape to simply ${HITRAN_DIR}.
#
# Revision 1.4  1999/01/06 17:06:10  paulv
# - The variable LBLRUN_TAG now contains the user name as well as the date and time.
#   This was done to avoid different user's LBLRTM runs clashing if they defined the
#   same LBL_RUN_ROOT environment variable and started their runs at the same time.
#   The created scratch directory names would still be unique but it would be difficult
#   to tell which scratch directory belonged to which user if, for some reason, it
#   became necessary to inspect the scratch area contents, e.g. if lblrun was killed
#   by the user.
# - A check is now made to determine if a TAPE13 file was created in the LBLRTM run.
#   If it wasn't, the scratch directory is deleted. If it was, the scratch directory
#   is not deleted and, rather than move the TAPE13 file to the user's results
#   directory, a link to the TAPE13 file is created in the user's results directory
#   to the scratch directory. This was done since the TAPE13 files generated can
#   be quite large and fill up a user area; not to mention the degeneration of
#   system response when moving a 500MB file across filesystems on a semi-regular
#   basis.
# - TAPE10 product file now moved to user's results directory.
# - RCS Id keyword string output when script is invoked.
# - Added some more inline documentation.
# - Updated header documentation.
#
# Revision 1.3  1998/10/26 21:10:12  paulv
# Added option of LBL_RUN_ROOT environment variable. This allows the user to
#   select the root directory in which LBLRTM is actually run. This option
#   was added to take advantage of superior I/O capabilities of different
#   file systems that *may* exist on a system.
#
# Revision 1.2  1998/10/22 19:39:24  paulv
# Added optional argument to specify subdirectory in which the LBLRTM
#   calculation result is placed. Default action is to create a date and
#   time tagged subdirectory.
# Updated header documentation.
#
# Revision 1.1.1.1  1998/10/21 22:22:49  paulv
# Imported source
#

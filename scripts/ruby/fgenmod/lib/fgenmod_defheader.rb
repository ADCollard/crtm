require 'fgenmod_defbase'
module FGenMod
  module Def

    class Header < FGenMod::Def::Base

      def generate
        name="#{config.namespace}#{config.struct_name}"

        s=Struct.new
        s.config = self.config
        
        # Base nspaces indent is 10
        nspaces=10
        
        # The header
        str=strip_output(<<-EOT,"")
        !
        ! #{name}_Define
        !
        ! Module defining the #{name} data structure and containing routines to 
        ! manipulate it.
        !
        ! CREATION HISTORY:
        !       This file was automatically generated so edit at your own risk.
        !       Generated by #{File.basename(__FILE__)} on #{Time.now.strftime('%d-%b-%Y')}
        !       Contact info:  Paul van Delst, CIMSS/SSEC
        !                      paul.vandelst@ssec.wisc.edu
        !

        MODULE #{name}_Define

          ! ------------------
          ! Environment set up
          ! ------------------
          ! Module use
          #{dependencies(:nspaces=>nspaces)}
          ! Disable implicit typing
          IMPLICIT NONE


          ! ------------
          ! Visibilities
          ! ------------
          ! Everything private by default
          PRIVATE
          ! Data structure definition
          PUBLIC :: #{name}_type
          ! Structure procedures
          #{public_procedures(:nspaces=>nspaces)}
            

          ! -----------------
          ! Module parameters
          ! -----------------
          ! RCS Id for the module
          CHARACTER(*), PARAMETER :: MODULE_RCS_ID = &
          '$Id: $'
          ! Literal constants
          REAL(fp), PARAMETER :: ZERO = 0.0_fp
          #{release_version_parameters(:nspaces=>nspaces) if config.release and config.version}

        EOT
        str.rstrip<<"\n\n"
      end

      # --------------
      # helper methods
      # --------------
      # Method to construct the
      # dependencies list
      def dependencies(args={})
        nspaces = args[:nspaces] ? args[:nspaces] : 0
        # Get a pretty print format
        fmt=string_format(FGenMod::Def::Generator::DEPENDENCIES.collect {|d| d[:mod]})
        # Build the module use list
        str=""
        FGenMod::Def::Generator::DEPENDENCIES.each do |d|
          str<<indent(nspaces)<<"USE #{fmt%d[:mod]}, ONLY: #{d[:only_list].join(", ")}\n"
        end
        str.lstrip.chomp
      end

      # Method to construct the
      # list of public procedures
      def public_procedures(args={})
        nspaces = args[:nspaces] ? args[:nspaces] : 0
        str=""
        FGenMod::Def::Generator::PUBLIC_GENERATORS.each do |gen_class|
          base_name=gen_class.to_s.split("::").last
          str<<indent(nspaces)<<"PUBLIC :: "<<procedure_name(base_name)<<"\n"
        end
        str.lstrip.chomp
      end
      
      # Method to construct the release
      # and version parameter definitions
      def release_version_parameters(args={})
        nspaces = args[:nspaces] ? args[:nspaces] : 0
        str="! Current valid release and version numbers\n"
        str<<indent(nspaces)<<"INTEGER, PARAMETER :: #{config.struct_name.upcase}_RELEASE = #{config.release}\n"
        str<<indent(nspaces)<<"INTEGER, PARAMETER :: #{config.struct_name.upcase}_VERSION = #{config.version}"
      end
    end
  end
end

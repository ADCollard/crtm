require 'define/base'
module FGenMod
  module Define

    class Header < FGenMod::Define::Base

      def generate
        name="#{config.namespace}#{config.struct_name}"

        (s=Struct.new).config=self.config
        
        # Base nspaces indent
        nspaces=10
        
        # The header
        str=strip_output(<<-EOT,"")
        !
        ! #{name}_#{module_name}
        !
        ! Module defining the #{name} data structure and containing routines to 
        ! manipulate it.
        !
        ! CREATION HISTORY:
        !       This file was automatically generated so edit at your own risk.
        !       Generated by #{File.basename(__FILE__)} on #{Time.now.strftime('%d-%b-%Y')}
        !       Contact info:  Paul van Delst, CIMSS/SSEC
        !                      paul.vandelst@ssec.wisc.edu
        !

        MODULE #{name}_#{module_name}

          ! ------------------
          ! Environment set up
          ! ------------------
          ! Module use
          #{dependencies(Generator::DEPENDENCIES,:nspaces=>nspaces)}
          ! Disable implicit typing
          IMPLICIT NONE


          ! ------------
          ! Visibilities
          ! ------------
          ! Everything private by default
          PRIVATE
          ! Data structure definition
          PUBLIC :: #{name}_type
          ! Structure procedures
          #{public_procedures(Generator::PUBLIC_GENERATORS,:nspaces=>nspaces)}
            

          ! -----------------
          ! Module parameters
          ! -----------------
          ! RCS Id for the module
          CHARACTER(*), PARAMETER :: MODULE_RCS_ID = &
          '$Id: $'
          ! Literal constants
          REAL(fp), PARAMETER :: ZERO = 0.0_fp
          #{release_version_parameters(:nspaces=>nspaces) if config.release and config.version}

        EOT
        str.rstrip<<"\n\n"
      end

      # --------------
      # helper methods
      # --------------
      # Method to construct the release
      # and version parameter definitions
      def release_version_parameters(args={})
        nspaces = args[:nspaces] ? args[:nspaces] : 0
        str="! Current valid release and version numbers\n"
        str<<indent(nspaces)<<"INTEGER, PARAMETER :: #{config.struct_name.upcase}_RELEASE = #{config.release}\n"
        str<<indent(nspaces)<<"INTEGER, PARAMETER :: #{config.struct_name.upcase}_VERSION = #{config.version}"
      end
    end
  end
end

#!/usr/bin/env ruby
#
# == Synopsis
#
# lblrun::  Script to setup and run the line-by-line programs MonoRTM or LBLRTM.
#
# == Usage
#
#    lblrun [OPTIONS] input-file
#
# Options:
#
#   --help  (-h):
#      you're looking at it.
#
#   --results-dir DIR (-r DIR)
#      Use this option to specify the name of the subdirectory, DIR, in which to copy
#      the results of the LBL program run.
#      Default action is to copy results into a subdirectory tagged by the user
#      name and LBL program run begin date and time.
#
#   --spectroscopy-dir (-s)
#      Use this option to specify the name of the directory in which the LBL
#      program spectroscopy database resides.
#      Default action is to use the directory defined as
#        $LBL_ROOT/<lbl-type>/spectroscopy
#      where <lbl-type> is a user-specified argument.
#
#   --spectroscopy-filename (-t)
#      Use this option to specify the name of the LBL program spectroscopy database
#      to use.
#      Default action is to use
#        "TAPE3" for LBLRTM
#      and
#        "spectral_lines.dat" for MonoRTM
#
#   --emissivity-filename (-e)
#      Use this option to specify the name of the surface emissivity datafile
#      to use.
#      Default filename is "EMISSIVITY"
#
#   --reflectivity-filename (-p)
#      Use this option to specify the name of the surface reflectivity datafile
#      to use.
#      Default filename is "REFLECTIVITY"
#
#   --sfcoptics-dir (-b)
#      Use this option to specify the name of the directory in which the surface
#      emissivity and reflectivity datafiles reside.
#      Default action is to use the current directory
#
#
# Arguments:
#
#   lbl-type
#      This argument defines the LBL program to run. Valid values are:
#        * lblrtm
#        * monortm
#
#   input-file
#      This argument specifies the input datafile for the LBL program. Typically
#      these files are called TAPE5 or MONORTM.IN.
#
#
# $Id: $
#

require 'lblrun'


# Configuration setup
config = LBLrun::Config.new()
config.process_arguments
config.display

# Begin the processing
LBLrun::Processor.new.process(config)


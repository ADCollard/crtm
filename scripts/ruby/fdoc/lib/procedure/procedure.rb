module FDoc
  module Procedure
    class Generator < FDoc::Base
    
      TAG         = "sdoc"
      NAME_REGEXP = %r{^\s*!\s*NAME:\s*!\s*([\D\d]*?)\n}ix
      
      # Class constructor
      def initialize(source)
        @source  = source
        @list    = []
      end
      
      # Main generator method
      def generate
        list(@source.extract(TAG))
        generate_latex
        generate_html
      end

      # Create hash list of entries      
      def list(entries)
        @list = []
        entries.each {|e| @list << {:name=>$1, :entry=>e.gsub(/!/," ")} if e =~ NAME_REGEXP}
        p = previous_names()
        n = next_names()
        @list.each_index {|i| @list[i][:previous_name] = p[i]; @list[i][:next_name] = n[i]}
      end
      
      def names
        @list.collect {|l| l[:name]}
      end

      def previous_names
        previous_names = names
        previous_names.unshift(previous_names.pop)
      end
      
      def next_names
        next_names = names
        next_names.push(next_names.shift)
      end
            
      # Generate latex files for each procedure
      def generate_latex
        @list.each do |element|
          latex_string=<<-EOT
\\subsection{\\texttt{#{element[:name].gsub(/_/,"\\_")}} interface}
  \\label{sec:#{element[:name]}_interface}
  \\begin{alltt}
#{element[:entry]}
  \\end{alltt}
          EOT
          tex_file_name = "#{element[:name]}.tex"
          File.open(tex_file_name,'w') {|f| f.write(latex_string)}
          signal(tex_file_name)
        end
      end
      
      # Generate html files for procedures
      def generate_html
        title = "#{@source.file_name} Procedures"


        html_file_name = "#{@source.file_name}.html"
        File.open(html_file_name,'w') do |f|
          
          # The preamble
          f.puts("<!-- Generated by #{self.class} -->")
          f.puts("<html>")
          f.puts("<head>")
          f.puts("<title>#{title}</title>")
          f.puts("</head>")
          f.puts("<body>")
          f.puts("<h1>#{title}</h1><p>")
          f.puts("<strong>Last modified: #{Time.now}</strong><p><hr>")
          
          # The index
          f.puts("<a name=\"procedure_list\"><h1>List of procedures</h1></a>")
          f.puts("<ul>")
          @list.each do |element|
            f.puts("  <li><a href=\"\##{element[:name]}\">#{element[:name]}</a>")
          end
          f.puts("</ul><p><hr>")

          # The descriptions
          @list.each do |element|
            f.puts("<a name=\"#{element[:name]}\"><h2>#{element[:name]}</h2></a>")
            f.puts("<a href=\"\##{element[:previous_name]}\">[Previous procedure]</a>")
            f.puts("<a href=\"\##{element[:next_name]}\">[Next procedure]</a>")
            f.puts("<a href=\"\#procedure_list\">[List of procedures]</a>")
            f.puts("<pre>")
            f.puts(element[:entry])
            f.puts("</pre><p><hr>")
          end

          f.puts("</body>")
          f.puts("</html>")
        end
        signal(html_file_name)
      end      
    end
  end
end


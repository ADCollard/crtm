#!/usr/bin/env ruby
#
# lblinput:: Using XML specification files, create Fortran95/2003 modules 
#            containing procedures to create LBLRTM and/or MonoRTM input files.
#
# Written by:: Paul van Delst, paul.vandelst@noaa.gov
#
# $Id: lblinput 23697 2012-12-21 19:33:43Z paul.vandelst@noaa.gov $
#

require 'optparse'
require 'lblinput'

# Define the script name for messages
script_name=File.basename($0)


# Command line option processing
options = {}
# ...Specify the options
opts = OptionParser.new do |opts|
  opts.banner = "Usage: lblinput [options]\n$Revision$"
  # Simple switch to create the LBLRTM modules.
  options[:lblrtm] = false
  opts.on("-l", "--lblrtm", "Set this option to create the LBLRTM modules") do
    options[:lblrtm] = true
  end
  # Simple switch to create the MonoRTM modules.
  options[:monortm] = false
  opts.on("-m", "--monortm", "Set this option to create the MonoRTM modules") do
    options[:monortm] = true
  end
  # Switch with mandatory parameter to specify the XML directory.
  options[:xmldir] = Dir.pwd
  opts.on("-x", "--xml-dir DIR", "Set this option to the location of the XML specification files") do |x|
    options[:xmldir] = x
  end
  # Simple switch to force overwrite of existing modules.
  options[:force] = false
  opts.on("-f", "--force", "Set this option to force overwrite of existing modules") do
    options[:force] = true
  end
  # Simple switch for verbose output.
  options[:verbose] = false
  opts.on("-v", "--verbose", "Set this option to output parsed XML data during processing") do
    options[:verbose] = true
  end
  # The help screen
  opts.on_tail("-h", "--help", "Show this message") do
    puts(opts)
    exit(0)
  end
end
# ...Parse the options
begin
  opts.parse! ARGV
rescue OptionParser::ParseError => error_message
  puts("ERROR --> #{error_message}")
  puts(opts)
  exit(1)
end


# Now perform some checking of options
# ...Check that at XML directory exists
unless File.directory?(options[:xmldir])
  puts("ERROR: XML directory, #{options[:xmldir]}, not found!")
  exit(1)
end
# ...Check that at least one type of LBL form was specified
unless (options[:lblrtm] || options[:monortm])
  puts("ERROR: No LBL model specified. Nothing to do!\n")
  puts(opts)
  exit(1)
end


# Specify the LBL directories to use
lbl_dir = ["common"]
lbl_dir << "lblrtm"  if options[:lblrtm]
lbl_dir << "monortm" if options[:monortm]


# Loop over XML directories
begin
  lbl_dir.each do |d|
    dir = "#{options[:xmldir]}/#{d}"
    files = Dir.glob("#{dir}/*.xml")
    raise StandardError, "No XML files found in #{dir}" if files.empty?
    files.each do |xml|
      input = LBLInput::Input.new(xml,force=options[:force])
      if options[:verbose]
        puts("\nThe xml input is:\n#{input.class}")
        input.display
      end
      input.module_write
    end
  end
rescue StandardError => error_message
  puts("ERROR: #{error_message}")
  exit(1)
end

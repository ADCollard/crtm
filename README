WARNING WARNING WARNING WARNING WARNING WARNING WARNING

This is an experimental build for testing openMP directives.
There is no warranty at all, express or implied.   Use at
your own risk.  Not fully tested for operational requirements.

WARNING WARNING WARNING WARNING WARNING WARNING WARNING


JCSDA CRTM v2.3.x Build Instructions
====================================

git tag from JEDI repo: v2.3.0_experimental_1


CRTM SUPPORT EMAIL: crtm-support@googlegroups.com

If you have problems building the library please include the
generated "config.log" file in your email correspondence.



            Contents
  ===============================
  1. Configuration, building, and testing the library
  2. Installing the library
    a. GNU Install
         - Linking to the library
    b. Uninstalling the library
  3. Cleaning up
  4. Feedback and contact info




1. CONFIGURATION, BUILDING, AND TESTING
=======================================

The CRTM tarball directory structure looks like:
 ./
  |-README  .................. this file
  |-configure  ............... configuration script
  |-Makefile.in  ............. makefile template used by "configure". Only experts should edit this file
  |-config_bld_test.crtm  .... "courtesy" script to build CRTM, then build and run test/check_crtm.fpp
  |-fix/  .................... coefficient datafiles
  `-libsrc/  ................. library source files


The build system for the CRTM uses an autoconf-generated configure script.

An interactive driving script named "config_bld_test.crtm" is provided to build CRTM, and then run
a test driver code (libsrc/test/check_crtm.fpp) to verify that everything is working. The script
does three things:

1.1) Define optional settings for "configure", then run "configure" to set Makefile variables 
     defining the compiler along with appropriate flags. In the case of Intel and gfortran 
     compilers, the default combinations of flags and settings have been tested and verified. 
     Note that as part of the "configure" process, the user has the option to modify or add to 
     settings. An example might be to add "--disable-big-endian" to force little-endian I/O (the
     default is big-endian).

1.2) Optionally run "make; make clean" to build the library.

1.3) If successful, then run "make check", which builds and runs test driver check_crtm.fpp. The
     output is stored in a file which config_bld_test.crtm tells you the name of. If check_crtm
     runs to successful completion, this message should appear at the end of the output file:

  TEST SUCCESSFUL!


2. INSTALLING THE LIBRARY
=========================

Installation of the library *always* occurs into its own directory within the
directory specified by the --prefix switch. The name of the installation
directory follows the convention:

  <library name>_<version>

So, if a library version (say, v2.3.0) build was configured with --prefix=$PWD
then the installation directory will be

  ${PWD}/crtm_v2.3.0



a. GNU Install
--------------

To perform a GNU-type install, type:

  $ make install

For a library version, say, v2.3.0, this will create a directory called
"crtm_v2.3.0". That directory structure is shown below:

  crtm_v2.3.0/
    |
    |--include/
    |    |
    |    |--accoeff_binary_io.mod
    |    |--accoeff_define.mod
    |    ...etc...
    |    |--zeeman_input_define.mod
    |    `--zeeman_utility.mod
    |
    `--lib/
         |
         `--libcrtm.a

Note that the only version-numbered item in this type of install is the name of
the installation directory itself.


Linking to the library
......................

Let's assume the above install was moved into "/usrx/local/nceplibs", to use the
library in this structure in your own application, the usual environment variables
would be modified something like:

  libroot="/usr/local/lib/crtm_v2.3.0"
  FCFLAGS="-I${libroot}/include ${FCFLAGS}"
  LDFLAGS="-L${libroot}/lib ${LDFLAGS}"
  LIBS="-lcrtm"

(with appropriate syntax changes for csh)



b. Uninstalling the library
---------------------------

To uninstall the library (assuming you haven't moved the installation directory
contents somewhere else) you can type:

  $ make uninstall
 
This will DELETE the created installation directory. So, for a library version,
say, v2.3.0, if your configure script invocation was something like

  $ ./configure --prefix=${PWD} ...other command line arguments...

then the "uninstall" target will delete the "${PWD}/crtm_v2.3.0" directory.




3. CLEANING UP
==============

Two targets are provided for cleaning up after the build. To remove all the
build products type

  $ make clean

To also remove all the configuration products (i.e. the makefiles) type

  $ make distclean




4. FEEDBACK AND CONTACT INFO
============================

That's pretty much it. Any questions or bug reports can be sent to CRTM Support.

  CRTM SUPPORT EMAIL: crtm-support@googlegroups.com

If you have problems building the library please include the generated "config.log"
file in your email correspondence.

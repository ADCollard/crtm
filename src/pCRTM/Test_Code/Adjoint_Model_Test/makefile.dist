#==============================================================================
#
# Makefile for pCRTM Adjoint_Model_Test
#
#==============================================================================

include make.macros


# -------------
# This makefile
# -------------

MAKE_FILE = makefile


# ---------------
# Executable file
# ---------------

EXE_FILE = Adjoint_Model_Test


# ------------
# Object files
# ------------

UTILITY_OBJ_FILES = Type_Kinds.o \
                    File_Utility.o \
                    Message_Handler.o \
                    Compare_Float_Numbers.o \
                    Endian_Utility.o \
                    Binary_File_Utility.o
SENSORINFO_OBJ_FILES = SensorInfo_Define.o \
                       SensorInfo_LinkedList.o \
                       SensorInfo_IO.o
SPCCOEFF_OBJ_FILES = SpcCoeff_Define.o \
                     SpcCoeff_Binary_IO.o
TAUCOEFF_OBJ_FILES = TauCoeff_Define.o \
                     TauCoeff_Binary_IO.o
NETCDF_OBJ_FILES = netCDF_Utility.o \
                   netCDF_Attribute_Utility.o \
                   netCDF_Dimension_Utility.o \
                   netCDF_Variable_Utility.o
ATMPROFILE_OBJ_FILES = AtmProfile_Define.o \
                       AtmProfile_netCDF_IO.o
TLADMTEST_OBJ_FILES = TLADMtest_Define.o \
                      TLADMtest_netCDF_IO.o
pCRTM_OBJ_FILES = parameters.o \
                  sensor_planck_routines.o \
                  spectral_coefficients.o \
                  transmittance_coefficients.o \
                  initialize.o \
                  absorber_profile.o \
                  predictors.o \
                  transmittance.o \
                  radiance.o \
                  forward_model.o \
                  tangent_linear_model.o \
                  adjoint_model.o

OBJ_FILES = $(UTILITY_OBJ_FILES) \
            $(SENSORINFO_OBJ_FILES) \
            $(SPCCOEFF_OBJ_FILES) \
            $(TAUCOEFF_OBJ_FILES) \
            $(NETCDF_OBJ_FILES) \
            $(ATMPROFILE_OBJ_FILES) \
            $(TLADMTEST_OBJ_FILES) \
            $(pCRTM_OBJ_FILES) \
            $(EXE_FILE).o


# -------------------------------
# Include and library definitions
# -------------------------------

INCLUDES = -I$(HOME)/local/netcdf/include
LIBRARIES = -L$(HOME)/local/netcdf/lib -lnetcdf



#-----------------------------------------------------------------------------
#                          -- Define dependecies --
#-----------------------------------------------------------------------------

# ---------------------
# Make based on OS type
# ---------------------

all:
	@echo "OS type detected: "`uname -s`
	@case `uname -s` in \
	  "SunOS")   make -f $(MAKE_FILE) test_program $(SUNOS_FLAGS) ;; \
	  "AIX")     make -f $(MAKE_FILE) test_program $(AIX_FLAGS) ;; \
	  "IRIX64" ) make -f $(MAKE_FILE) test_program $(IRIX64_FLAGS) ;; \
	  "Linux" )  make -f $(MAKE_FILE) test_program $(Linux_FLAGS) ;; \
	  *) echo "This system is not supported" ;; \
       esac



# ----------------
# Make the program
# ----------------

test_program: link_endian $(OBJ_FILES)
	$(FL) $(OBJ_FILES) $(FL_FLAGS) $(EXE_FILE)



# --------
# Clean up
# --------

clean:
	$(REMOVE) $(OBJ_FILES) $(EXE_FILE) *.mod *.MOD



# ----------------------------------------------
# Data file link target for platform endian type
# ----------------------------------------------

# -- Define file and type tags
DATA_FILE_TAGS = amsua_n17 \
                 hirs3_n17 \
                 ssmis_f16

DATA_TYPE_TAGS = SpcCoeff TauCoeff


# -- Link to the required files
endian:
	@echo "OS type detected: "`uname -s`
	@case `uname -s` in \
	  "SunOS")   make -f $(MAKE_FILE) link_endian $(SUNOS_FLAGS) ;; \
	  "AIX")     make -f $(MAKE_FILE) link_endian $(AIX_FLAGS) ;; \
	  "IRIX64" ) make -f $(MAKE_FILE) link_endian $(IRIX64_FLAGS) ;; \
	  "Linux" )  make -f $(MAKE_FILE) link_endian $(Linux_FLAGS) ;; \
	  *) echo "This system is not supported" ;; \
       esac


link_endian:
	@for file_tag in ${DATA_FILE_TAGS}; do \
	  for type_tag in ${DATA_TYPE_TAGS}; do \
	    link_file=$$file_tag.$$type_tag.bin ; \
	    if [ ! -f $$link_file ]; then \
	      $(LINK) $$link_file.${ENDIAN} $$link_file ; \
	    fi ; \
	  done; \
	done


# ---------------
# Dependency list
# ---------------

Type_Kinds.o : Type_Kinds.f90
File_Utility.o : File_Utility.f90
Message_Handler.o : Message_Handler.f90 File_Utility.o
Compare_Float_Numbers.o : Compare_Float_Numbers.f90 Type_Kinds.o
Endian_Utility.o : Endian_Utility.f90 Type_Kinds.o
Binary_File_Utility.o : Binary_File_Utility.f90 Type_Kinds.o File_Utility.o Message_Handler.o Endian_Utility.o

SensorInfo_Define.o : SensorInfo_Define.f90 Type_Kinds.o Message_Handler.o
SensorInfo_LinkedList.o : SensorInfo_LinkedList.f90 Type_Kinds.o Message_Handler.o SensorInfo_Define.o 
SensorInfo_IO.o : SensorInfo_IO.f90 Type_Kinds.o File_Utility.o Message_Handler.o SensorInfo_Define.o 

parameters.o : parameters.f90 Type_Kinds.o
spectral_coefficients.o : spectral_coefficients.f90 Type_Kinds.o Message_Handler.o parameters.o SpcCoeff_Define.o SpcCoeff_Binary_IO.o
transmittance_coefficients.o : transmittance_coefficients.f90 Type_Kinds.o Message_Handler.o parameters.o TauCoeff_Define.o TauCoeff_Binary_IO.o
initialize.o : initialize.f90 Message_Handler.o transmittance_coefficients.o spectral_coefficients.o
absorber_profile.o : absorber_profile.f90 Type_Kinds.o parameters.o
predictors.o : predictors.f90 Type_Kinds.o Message_Handler.o parameters.o
transmittance.o : transmittance.f90 Type_Kinds.o parameters.o transmittance_coefficients.o
sensor_planck_routines.o : sensor_planck_routines.f90 Type_Kinds.o parameters.o spectral_coefficients.o
radiance.o : radiance.f90 Type_Kinds.o parameters.o spectral_coefficients.o sensor_planck_routines.o
forward_model.o : forward_model.f90 Type_Kinds.o Message_Handler.o parameters.o spectral_coefficients.o absorber_profile.o predictors.o transmittance.o radiance.o
tangent_linear_model.o : tangent_linear_model.f90 Type_Kinds.o Message_Handler.o parameters.o spectral_coefficients.o absorber_profile.o predictors.o transmittance.o radiance.o forward_model.o
adjoint_model.o : adjoint_model.f90 Type_Kinds.o Message_Handler.o parameters.o spectral_coefficients.o absorber_profile.o predictors.o transmittance.o radiance.o forward_model.o

SpcCoeff_Define.o : SpcCoeff_Define.f90 Type_Kinds.o Message_Handler.o Compare_Float_Numbers.o
SpcCoeff_Binary_IO.o : SpcCoeff_Binary_IO.f90 Type_Kinds.o File_Utility.o Message_Handler.o SpcCoeff_Define.o Binary_File_Utility.o
TauCoeff_Define.o : TauCoeff_Define.f90 Type_Kinds.o Message_Handler.o Compare_Float_Numbers.o
TauCoeff_Binary_IO.o : TauCoeff_Binary_IO.f90 Type_Kinds.o File_Utility.o Message_Handler.o TauCoeff_Define.o Binary_File_Utility.o

netCDF_Dimension_Utility.o : netCDF_Dimension_Utility.f90 Message_Handler.o Type_Kinds.o 
netCDF_Variable_Utility.o : netCDF_Variable_Utility.f90 Message_Handler.o Type_Kinds.o 
netCDF_Attribute_Utility.o : netCDF_Attribute_Utility.f90 Message_Handler.o Type_Kinds.o 
netCDF_Utility.o : netCDF_Utility.f90 netCDF_Attribute_Utility.o netCDF_Variable_Utility.o netCDF_Dimension_Utility.o Message_Handler.o Type_Kinds.o 

AtmProfile_Define.o : AtmProfile_Define.f90 Type_Kinds.o Message_Handler.o Compare_Float_Numbers.o
AtmProfile_netCDF_IO.o : AtmProfile_netCDF_IO.f90 Type_Kinds.o Message_Handler.o AtmProfile_Define.o netCDF_Utility.o 

TLADMtest_Define.o : TLADMtest_Define.f90 Type_Kinds.o Message_Handler.o
TLADMtest_netCDF_IO.o : TLADMtest_netCDF_IO.f90 Type_Kinds.o Message_Handler.o TLADMtest_Define.o netCDF_Utility.o

$(EXE_FILE).o : $(EXE_FILE).f90 Type_Kinds.o File_Utility.o Message_Handler.o AtmProfile_Define.o AtmProfile_netCDF_IO.o SensorInfo_Define.o SensorInfo_LinkedList.o SensorInfo_IO.o initialize.o parameters.o tangent_linear_model.o adjoint_model.o spectral_coefficients.o TLADMtest_Define.o TLADMtest_netCDF_IO.o


# -------------------------------
# Create tarball for distribution
# -------------------------------

TAR_FILE = pCRTM_$(EXE_FILE)_software.tar

tar:
	$(TARBALL_CREATE) $(TAR_FILE) ${OBJ_FILES:.o=.f90}
	$(TARBALL_APPEND) $(TAR_FILE) makefile
	$(TARBALL_APPEND) $(TAR_FILE) make.macros make.rules
	@for file_tag in ${DATA_FILE_TAGS}; do \
	  $(TARBALL_APPEND) $(TAR_FILE) $$file_tag.*.bin.*Endian ; \
	done
	compress $(TAR_FILE)



#-----------------------------------------------------------------------------
#                          -- Define default rules --
#-----------------------------------------------------------------------------

include make.rules


#!/bin/sh

# $Id$

# --------------
# Usage function
# --------------
usage()
{
  echo " Usage: run_SpcCoeff_NC2BIN -l|b[fhs]"
  echo
  echo "   Convert any netCDF format SpcCoeff files in the current"
  echo "   directory to Binary format. File with the suffix *.SpcCoeff.nc"
  echo "   are converted into *.SpcCoeff.bin files."
  echo
  echo '   $Revision$'
  echo
  echo "     -l       Produce little-endian binary output files"
  echo
  echo "     -b       Produce big-endian binary output files"
  echo
  echo "     -f       Force overwrite of output file if it already exists."
  echo "              Default behaviour is to skip conversion if the output"
  echo "              file is already present."
  echo
  echo "     -h       Print this message and exit"
  echo
}


# -----------
# Main script
# -----------

# Setup
# -----
# Script name for error messages
SCRIPT_NAME="`basename $0`"

# Defaults
ENDIAN_TYPE="NONE"
ENDIAN_RUNTIME_ARG=""
OVERWRITE="NO"


# Parse the command line options
# ------------------------------
while getopts :hlbfs:r: OPTVAL; do

  # If option argument looks like
  # another option exit the loop
  case ${OPTARG} in
    -*) break;;
  esac

  # Parse the valid options here
  case ${OPTVAL} in
    l)  ENDIAN_TYPE="little";;
    b)  ENDIAN_TYPE="big";;
    f)  OVERWRITE="YES";;
    h)  usage
        exit 0;;
    :|\?) OPTVAL=${OPTARG}
          break;;
  esac
done


# Remove the options processed
# ----------------------------
shift `expr ${OPTIND} - 1`


# Now output invalidities based on OPTVAL
# Need to do this as getopts does not handle
# the situations where an option is passed
# as an argument to another option.
# ------------------------------------------
case ${OPTVAL} in

  # If OPTVAL contains nothing, then all options
  # have been successfully parsed
  \?) if [ $# -ne 0 ]; then
        ( echo "${SCRIPT_NAME}: Invalid argument(s) $*" ; echo ; usage ) | more
        exit 2
      fi;;

  # Invalid option
  ?) ( echo "${SCRIPT_NAME}: Invalid option '-${OPTARG}'" ; usage ) | more
     exit 2;;

esac


# Check that an endian type was specified
# ------------------------------------------
if [ ${ENDIAN_TYPE} = "NONE" ]; then
  ( echo "${SCRIPT_NAME}: Must specify and endian type, -l or -b" ; echo ; usage ) | more
  exit 2
fi


# Assign processing parameters
# ----------------------------
# Lahey Linux compiler-specific run time option
if [ ${ENDIAN_TYPE} = "big" ]; then
  ENDIAN_RUNTIME_ARG="-Wl,-T"
fi
EXE_FILE="SpcCoeff_NC2BIN"
LOG_FILE="${EXE_FILE}.log"


# Loop over netCDF SpcCoeff files
# -------------------------------
for NC_FILE in `ls *.SpcCoeff.nc`; do

  # Create binary filename
  BIN_FILE="`basename ${NC_FILE} .nc`.bin"

  # Check to see if the output file exists
  if [ -f ${BIN_FILE} -a ${OVERWRITE} = "NO" ]; then
    echo " Output file ${BIN_FILE} already exists. Skipping to next file..."
    continue
  fi

  # Convert the file
  echo " Converting ${NC_FILE} to ${ENDIAN_TYPE} endian binary format file ${BIN_FILE}..."
  ${EXE_FILE} ${ENDIAN_RUNTIME_ARG} <<-NoMoreInput >> ${LOG_FILE}
	${NC_FILE}
	${BIN_FILE}
	${FILE_TYPE}
	NoMoreInput
done

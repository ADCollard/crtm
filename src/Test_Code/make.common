#==============================================================================
#
# Include file for CRTM test/examples program builds that contains all
# the common definitions and targets.
#
#==============================================================================

# -------------
# Define macros
# -------------
include ../make.macros

# This makefile
MAKE_FILE = Makefile

# Source and obj files
UTILITY_SRC_FILES = CRTM_Test_Utility.f90 \
                    SensorInfo_Define.f90 \
                    SensorInfo_LinkedList.f90 \
                    SensorInfo_IO.f90 \
                    Timing_Utility.f90 \
                    Unit_Test.f90 \
                    SignalFile_Utility.f90
SRC_FILES = $(UTILITY_SRC_FILES) \
            $(EXE_FILE).o
OBJ_FILES = ${SRC_FILES:.f90=.o}

# The linkfile script
LINK_SCRIPT = linkfiles
UNLINK_SCRIPT = unlinkfiles

# The test input data files
ATM_DATA_FILES = Test.Atmosphere.Cloud.Aerosol.bin
SFC_DATA_FILES = Test.Surface.bin

# The instrument independent coefficient files
COEFF_DATA_FILES = EmisCoeff.bin AerosolCoeff.bin CloudCoeff.bin

# The sensors Ids for the sensors to test
IR_SENSOR_IDS = hirs3_n17 imgr_g11 hirs4_n18 iasi_metop-a airs_aqua iasiB1_metop-a
MW_SENSOR_IDS_NO_AC = ssmis_f16
MW_SENSOR_IDS_AC = amsua_n17 amsua_n18 mhs_n18
MW_SENSOR_IDS = $(MW_SENSOR_IDS_NO_AC) $(MW_SENSOR_IDS_AC)
SENSOR_IDS = $(IR_SENSOR_IDS) $(MW_SENSOR_IDS) 

# CRTM Library and include macros
#INCLUDES = -I$(CRTM_SOURCE_ROOT)/Build/include
#LIBRARIES = -L$(CRTM_SOURCE_ROOT)/Build/lib -lCRTM
INCLUDES = -I$(HOME)/local/CRTM/include
LIBRARIES = -L$(HOME)/local/CRTM/lib -lCRTM


# ------------------
# Define dependecies
# ------------------
# Make based on OS type
all:
	@echo "OS type detected: "`uname -s`
	@case `uname -s` in \
	  "SunOS")  make -f $(MAKE_FILE) build $(SUNOS_FLAGS) ;; \
	  "AIX")    make -f $(MAKE_FILE) build $(AIX_FLAGS) ;; \
	  "IRIX64") make -f $(MAKE_FILE) build $(IRIX64_FLAGS) ;; \
	  "Linux"|"Darwin")  make -f $(MAKE_FILE) build $(LINUX_FLAGS) ;; \
	  *) echo "This system is not supported" ;; \
       esac

# Targets for specific Linux compilers.
gfortran_debug:
	make -f $(MAKE_FILE) build $(LINUX_FLAGS_GFORTRAN_DEBUG)

gfortran:
	make -f $(MAKE_FILE) build $(LINUX_FLAGS_GFORTRAN_PROD)

intel_debug:
	make -f $(MAKE_FILE) build $(LINUX_FLAGS_INTEL_DEBUG)

intel:
	make -f $(MAKE_FILE) build $(LINUX_FLAGS_INTEL_PROD)

lahey_debug:
	make -f $(MAKE_FILE) build $(LINUX_FLAGS_LAHEY_DEBUG)

lahey:
	make -f $(MAKE_FILE) build $(LINUX_FLAGS_LAHEY_PROD)

pgi_debug:
	make -f $(MAKE_FILE) build $(LINUX_FLAGS_PGI_DEBUG)

pgi:
	make -f $(MAKE_FILE) build $(LINUX_FLAGS_PGI_PROD)

g95_debug:
	make -f $(MAKE_FILE) build $(LINUX_FLAGS_G95_DEBUG)

g95:
	make -f $(MAKE_FILE) build $(LINUX_FLAGS_G95_PROD)


# Build the program
build: $(OBJ_FILES)
	$(FL) $(OBJ_FILES) $(EXTRA_FL_FLAGS) $(FL_FLAGS) $(EXE_FILE)


# Run target
run:
	$(REMOVE) $(EXE_FILE).signal
	$(EXE_FILE) $(RUN_OPTS) < ../Test.Default_Input

# Create/remove the source and data links
ENDIAN = Big_Endian
create_links:
	@$(LINK_SCRIPT) $(CRTM_SOURCE_ROOT) $(UTILITY_SRC_FILES); \
	$(LINK_SCRIPT) -d ${ENDIAN} ${CRTM_SOURCE_ROOT} ${ATM_DATA_FILES}; \
	$(LINK_SCRIPT) -d ${ENDIAN} ${CRTM_SOURCE_ROOT} ${SFC_DATA_FILES}; \
	$(LINK_SCRIPT) -d ${ENDIAN} ${CRTM_FIXFILE_ROOT} ${COEFF_DATA_FILES}; \
	for id in ${IR_SENSOR_IDS}; do \
	  $(LINK_SCRIPT) -d ${ENDIAN} ${CRTM_FIXFILE_ROOT}/SpcCoeff/Infrared $$id.SpcCoeff.bin; \
	  $(LINK_SCRIPT) -d ${ENDIAN} ${CRTM_FIXFILE_ROOT}/TauCoeff/ODAS/Infrared $$id.TauCoeff.bin; \
	done; \
	for id in ${MW_SENSOR_IDS}; do \
	  $(LINK_SCRIPT) -d ${ENDIAN} ${CRTM_FIXFILE_ROOT}/TauCoeff/ODAS/Microwave $$id.TauCoeff.bin; \
	done; \
	for id in ${MW_SENSOR_IDS_NO_AC}; do \
	  $(LINK_SCRIPT) -d ${ENDIAN} ${CRTM_FIXFILE_ROOT}/SpcCoeff/Microwave/No_AC $$id.SpcCoeff.bin; \
	done; \
	for id in ${MW_SENSOR_IDS_AC}; do \
	  $(LINK_SCRIPT) -d ${ENDIAN} ${CRTM_FIXFILE_ROOT}/SpcCoeff/Microwave/AAPP_AC $$id.SpcCoeff.bin; \
	done

remove_links:
	@$(UNLINK_SCRIPT) $(UTILITY_SRC_FILES); \
	$(UNLINK_SCRIPT) ${ATM_DATA_FILES}; \
	$(UNLINK_SCRIPT) ${SFC_DATA_FILES}; \
	$(UNLINK_SCRIPT) ${COEFF_DATA_FILES}; \
	for id in ${SENSOR_IDS}; do \
	  $(UNLINK_SCRIPT) $$id.SpcCoeff.bin; \
	  $(UNLINK_SCRIPT) $$id.TauCoeff.bin; \
	done


# Clean up
clean:
	$(REMOVE) $(OBJ_FILES) $(EXE_FILE) *.mod *.MOD gmon.out

realclean: remove_links clean
	$(REMOVE) *.signal *.bin Test.Report


# --------------------
# Define default rules
# --------------------
include ../make.rules
